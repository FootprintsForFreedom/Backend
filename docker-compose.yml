# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
version: '3.7'

volumes:
  # public_data:
  db_data:
  caddy_data:
  caddy_config:
  geoipupdate_data:
  esdata:
  
services:

  app:
    image: niklhut/footprintsforfreedombackend:1.0
    build:
      context: .
    env_file: .env.production
    depends_on:
      db: 
        condition: service_healthy
      queues:
        condition: service_started
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      geoipupdate:
        condition: service_healthy
    volumes:
      # - "public_data:/app/Public"
    # uncomment this to preserve the Public files over app restarts
      - "./Public:/app/Public"
      - "geoipupdate_data:/app/Resources/GeoIP"
      - "./imagemagick-policy.xml:/etc/ImageMagick-6/policy.xml"
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
    ports:
      - "8080:8080"

  queues: 
    image: niklhut/footprintsforfreedombackend:1.0
    build:
      context: .
    env_file: .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - "geoipupdate_data:/app/Resources/GeoIP"
    command: ["queues", "--scheduled"]

  migrate:
    image: niklhut/footprintsforfreedombackend:1.0
    build:
      context: .
    env_file: .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      geoipupdate:
        condition: service_healthy
    volumes:
      - "geoipupdate_data:/app/Resources/GeoIP"
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
  
  revert:
    image: niklhut/footprintsforfreedombackend:1.0
    build:
      context: .
    env_file: .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      geoipupdate:
        condition: service_healthy
    volumes:
      - "geoipupdate_data:/app/Resources/GeoIP"
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0

  db:
    image: postgres:15-alpine
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    env_file: .env.production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s

  caddy:
    image: caddy:latest
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./Public:/app/Public"
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config

  geoipupdate:
    image: maxmindinc/geoipupdate
    # restart: unless-stopped
    env_file: .env.production
    volumes:
      - 'geoipupdate_data:/usr/share/GeoIP'
    healthcheck:
      test: sh -c '[ -f /usr/share/GeoIP/GeoLite2-City.mmdb ]'
      interval: 5s
      retries: 5
      timeout: 5s


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.1
    environment:
      - node.name=es-node
      - discovery.type=single-node
      - cluster.name=es-data-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    env_file: .env
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: curl --fail http://localhost:9200 || exit 1
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.1
    env_file: .env
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
    - 5601:5601

